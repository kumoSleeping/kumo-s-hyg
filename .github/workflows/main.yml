name: Build and Release Multi-Platform

on:
  push:
    branches:
      - main

env:
  APP_NAME: khyg
  # 版本号会在 Extract version 步骤中动态设置

jobs:
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller

    - name: Extract version from __init__.py
      id: get_version
      run: |
        echo "VERSION=$(python app/__init__.py -v)" >> $GITHUB_ENV
        echo "OUTPUT_NAME=${APP_NAME}-windows-v$(python app/__init__.py -v)" >> $GITHUB_ENV

    - name: Build Windows EXE
      run: |
        pyinstaller --onefile --name ${{ env.OUTPUT_NAME }} --hidden-import noneprompt --hidden-import PyYAML --hidden-import requests --hidden-import qrcode --hidden-import loguru --hidden-import PIL --add-data "app;app" run.py
        # 重命名输出文件以去除多余的扩展名
        mv dist/${{ env.OUTPUT_NAME }}.exe dist/${{ env.OUTPUT_NAME }}.exe

    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v3
      with:
        name: windows-executable
        path: dist/${{ env.OUTPUT_NAME }}.exe

  build-macos:
    runs-on: macos-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller

    - name: Extract version from __init__.py
      id: get_version
      run: |
        echo "VERSION=$(python app/__init__.py -v)" >> $GITHUB_ENV
        echo "OUTPUT_NAME=${APP_NAME}-macos-v$(python app/__init__.py -v)" >> $GITHUB_ENV

    - name: Build macOS App
      run: |
        pyinstaller --onefile --name ${{ env.OUTPUT_NAME }} --hidden-import noneprompt --hidden-import PyYAML --hidden-import requests --hidden-import qrcode --hidden-import loguru --hidden-import PIL --add-data "app:app" run.py
        # 确保可执行文件有正确的权限
        chmod +x dist/${{ env.OUTPUT_NAME }}

    - name: Upload macOS Artifact
      uses: actions/upload-artifact@v3
      with:
        name: macos-executable
        path: dist/${{ env.OUTPUT_NAME }}

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Download Windows Artifact
      uses: actions/download-artifact@v3
      with:
        name: windows-executable
        path: windows-build

    - name: Download macOS Artifact
      uses: actions/download-artifact@v3
      with:
        name: macos-executable
        path: macos-build

    - name: Set Git User
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Create Git Tag
      run: |
        git tag -d "v${{ env.VERSION }}" || true
        git push origin --delete "v${{ env.VERSION }}" || true
        git tag -a "v${{ env.VERSION }}" -m "Release v${{ env.VERSION }}"
        git push origin "v${{ env.VERSION }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ env.VERSION }}
        name: Release v${{ env.VERSION }}
        body: |
          Windows: ${{ env.APP_NAME }}-windows-v${{ env.VERSION }}.exe
          macOS: ${{ env.APP_NAME }}-macos-v${{ env.VERSION }}
        draft: false
        prerelease: false
        files: |
          windows-build/${{ env.APP_NAME }}-windows-v${{ env.VERSION }}.exe
          macos-build/${{ env.APP_NAME }}-macos-v${{ env.VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
