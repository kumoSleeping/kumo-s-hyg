name: Build and Release Multi-Platform on Version Change

on:
  push:
    branches:
      - main
    paths:
      - 'app/__main__.py' # 只有当这个文件改变时才触发

env:
  APP_NAME: khyg
  # 版本号将在“Extract version”步骤中动态设置

jobs:
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write # 需要上传构建产物

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # 获取所有历史记录以提取/标记版本
        fetch-tags: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install noneprompt
        pip install PyYAML
        pip install requests
        pip install qrcode
        pip install loguru
        pip install pillow
      shell: pwsh # 使用 PowerShell

    - name: Extract version from __init__.py
      id: get_version
      run: |
        $VERSION_STR = python run.py -v
        if (-not $VERSION_STR) {
          Write-Error "Failed to extract version from python run.py -v"
          exit 1
        }
        # 为此作业中的后续步骤以及 create-release 作业需求设置环境变量
        echo "VERSION=$VERSION_STR" >> $env:GITHUB_ENV # Windows runner 使用 PowerShell 语法
        echo "OUTPUT_NAME=${{ env.APP_NAME }}-windows-v$VERSION_STR" >> $env:GITHUB_ENV # 使用 PowerShell 语法
        Write-Host "Extracted Version: $VERSION_STR"
        Write-Host "Set OUTPUT_NAME to: ${{ env.APP_NAME }}-windows-v$VERSION_STR"
      shell: pwsh # 使用 PowerShell

    - name: Verify Environment Variables # 添加了验证步骤
      run: |
        Write-Host "VERSION is: ${{ env.VERSION }}"
        Write-Host "OUTPUT_NAME is: ${{ env.OUTPUT_NAME }}"
        if (-not $env:OUTPUT_NAME) {
          Write-Error "OUTPUT_NAME environment variable is not set or is empty after extraction!"
          exit 1
        }
      shell: pwsh

    - name: Build Windows EXE
      run: |
        pyinstaller --onefile --name "${{ env.OUTPUT_NAME }}" --hidden-import noneprompt --hidden-import yaml --hidden-import requests --hidden-import qrcode --hidden-import loguru --hidden-import PIL --add-data "app;app" run.py
      shell: pwsh # 使用 PowerShell

    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable-${{ env.VERSION }} # 为构建产物添加版本号以避免冲突
        path: dist/${{ env.OUTPUT_NAME }}.exe # PyInstaller 创建的可执行文件的路径

  build-macos:
    runs-on: macos-latest
    permissions:
      contents: write # 需要上传构建产物

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install noneprompt
        pip install PyYAML
        pip install requests
        pip install qrcode
        pip install loguru
        pip install pillow

    - name: Extract version from __init__.py
      id: get_version
      run: |
        VERSION_STR=$(python app/__init__.py -v)
        if [ -z "$VERSION_STR" ]; then
          echo "::error::Failed to extract version from app/__init__.py -v"
          exit 1
        fi
        # 为此作业中的后续步骤以及 create-release 作业需求设置环境变量
        echo "VERSION=$VERSION_STR" >> $GITHUB_ENV # macOS runner 使用 Bash 语法
        echo "OUTPUT_NAME=${{ env.APP_NAME }}-macos-v$VERSION_STR" >> $GITHUB_ENV # 使用 Bash 语法
        echo "Extracted Version: $VERSION_STR"
        echo "Set OUTPUT_NAME to: ${{ env.APP_NAME }}-macos-v$VERSION_STR"

    - name: Verify Environment Variables
      run: |
        echo "VERSION is: ${{ env.VERSION }}"
        echo "OUTPUT_NAME is: ${{ env.OUTPUT_NAME }}"
        if [ -z "${{ env.OUTPUT_NAME }}" ]; then
            echo "::error::OUTPUT_NAME environment variable is not set or is empty after extraction!"
            exit 1
        fi

    - name: Build macOS App
      run: |
        pyinstaller --onefile --name "${{ env.OUTPUT_NAME }}" --hidden-import noneprompt --hidden-import yaml --hidden-import requests --hidden-import qrcode --hidden-import loguru --hidden-import PIL --add-data "app:app" run.py
        # 确保输出文件可执行
        chmod +x dist/"${{ env.OUTPUT_NAME }}"

    - name: Upload macOS Artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-executable-${{ env.VERSION }} # 为构建产物添加版本号以避免冲突
        path: dist/${{ env.OUTPUT_NAME }} # PyInstaller 创建的可执行文件的路径

  create-release:
    needs: [build-windows, build-macos] # 在两个构建都成功后运行
    runs-on: ubuntu-latest
    permissions:
      contents: write # 需要创建标签和发布

    steps:
      # 需要 checkout 才能再次运行 python 脚本或进行标记
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      # 在此处重新提取版本以确保其可用于发布命名/标记
      - name: Extract version for Release
        id: get_version_release
        run: |
          # 需要先安装 python 环境才能执行脚本
          sudo apt-get update && sudo apt-get install -y python3 python3-pip
          VERSION_STR=$(python3 app/__init__.py -v)
          if [ -z "$VERSION_STR" ]; then
            echo "::error::Failed to extract version from app/__init__.py -v for release"
            exit 1
          fi
          echo "VERSION=$VERSION_STR" >> $GITHUB_ENV
          echo "WINDOWS_FILENAME=${{ env.APP_NAME }}-windows-v$VERSION_STR.exe" >> $GITHUB_ENV
          echo "MACOS_FILENAME=${{ env.APP_NAME }}-macos-v$VERSION_STR" >> $GITHUB_ENV
          echo "Release Version: $VERSION_STR"

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-executable-${{ env.VERSION }} # 使用带版本号的名称下载
          path: artifacts # 将所有构建产物下载到通用目录

      - name: Download macOS Artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-executable-${{ env.VERSION }} # 使用带版本号的名称下载
          path: artifacts # 将所有构建产物下载到通用目录

      # 在继续之前验证下载的文件是否存在
      - name: Verify Downloaded Artifacts
        run: |
          echo "Checking for Windows artifact: artifacts/${{ env.WINDOWS_FILENAME }}"
          ls -l artifacts/
          if [ ! -f "artifacts/${{ env.WINDOWS_FILENAME }}" ]; then
            echo "::error::Windows artifact not found after download!"
            exit 1
          fi
          echo "Checking for macOS artifact: artifacts/${{ env.MACOS_FILENAME }}"
          if [ ! -f "artifacts/${{ env.MACOS_FILENAME }}" ]; then
            echo "::error::macOS artifact not found after download!"
            exit 1
          fi

      # --- 移除了 'Check if Release Exists' 步骤 ---

      - name: Create Release
        # --- 移除了 if 条件 ---
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body: |
            Automated release for version ${{ env.VERSION }}.

            **Downloads:**
            * Windows: `${{ env.WINDOWS_FILENAME }}`
            * macOS: `${{ env.MACOS_FILENAME }}`
          draft: false
          prerelease: false
          files: |
            artifacts/${{ env.WINDOWS_FILENAME }}
            artifacts/${{ env.MACOS_FILENAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
